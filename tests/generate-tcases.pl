#!/usr/bin/perl -w

# Generates test cases and supplementary files in tests/tcases/.
# Uses src/HttpPaxxer/IntegerPaxxer to make wire representations of integers.

use strict;
use warnings;
use bigint;
use File::Basename;

my $Paxxer = '../src/HttpPaxxer/IntegerPaxxer';
die("Cannot run $Paxxer, stopped") unless -x $Paxxer;
my $OutDir = 'tcases';
die("Must be started from tests/, stopped") unless -d $OutDir;

# Filename sets to avoid creating multiple identical Makefile entries
my %Images = ();
my %TCases = ();


# HPACK Appendix C gives the following three examples:
# Example 1: Encoding 10 Using a 5-bit Prefix (int-10-N5-packer.tcase)
&makeCases(10, 5);
# Example 2: Encoding 1337 Using a 5-bit Prefix (int-1337-N5-packer.tcase)
&makeCases(1337, 5);
# Example 3: Encoding 42 Starting at an Octet Boundary (int-42-N8-packer.tcase)
&makeCases(42, 8);

# min/max and other corner cases
&makeCases(0, 1, 3, 8);
&makeCases(1, 1, 4, 8);
&makeCases(255, 1, 5, 8);
&makeCases(256, 1, 6, 8);
&makeCases('max64', 1, 7, 8); # largest unsigned 64-bit integer

# Test a full range of prefix sizes using a multi-byte number
&makeCases(123456, 1 .. 8);

&makeMakefileRules();
exit 0;


sub human { return sprintf('int-%s.human', @_); }
sub wire { return sprintf('int-%s-N%d.wire', @_); }
sub tcase { return sprintf('int-%s-N%d-%s.tcase', @_); }
sub number { my $n = shift; return $n eq 'max64' ? (2 ** 64 - 1) : $n; }


sub makeCases {
	my ($number, @prefixSizes) = @_;
	&makeHumanImage($number);
	foreach my $prefixSize (@prefixSizes) {
		&makeWireImage($number, $prefixSize);
		&makeParserCase($number, $prefixSize);
		&makePackerCase($number, $prefixSize);
	}
}

sub makeHumanImage {
	my ($number) = @_;
	my $human = &human($number);
	my $of = &create($human, \%Images) or return;
	printf($of "%u\n", &number($number)) or die("cannot write $human: $!; stopped");
	close $of;
}

sub makeWireImage {
	my ($number, $prefixSize) = @_;

	my $wire = &wire($number, $prefixSize);
	my $of = &create($wire, \%Images) or return;
	close($of); # XXX: we have to do this by hand below

	my $cmd = "$Paxxer --pack $prefixSize | xxd >> $OutDir/$wire";
	open(OF, "|$cmd") or die("cannot create $wire with $cmd: $!; stopped");
	printf(OF "%u\n", &number($number)) or
		die("cannot write $number to $cmd: $!; stopped");
	close(OF);
}

sub makePackerCase {
	my ($number, $prefixSize) = @_;

	my $tcase = &tcase($number, $prefixSize, 'packer');
	my $of = &create($tcase, \%TCases) or return;

	my $human = &human($number, $prefixSize);
	my $wire = &wire($number, $prefixSize);
	my $paxxer = basename $Paxxer;
	&printDoNotEditWarning($of);
	printf($of 'inputFilter="cat $srcdir/tcases/%s";'."\n", $human);
	print($of "outputFilter='xxd';\n");
	printf($of 'expectedOutput="$srcdir/tcases/%s";'."\n", $wire);
	print($of "testProgram='$paxxer --pack $prefixSize';\n");
	close($of);
}

sub makeParserCase {
	my ($number, $prefixSize) = @_;

	my $tcase = &tcase($number, $prefixSize, 'parser');
	my $of = &create($tcase, \%TCases) or return;

	my $human = &human($number, $prefixSize);
	my $wire = &wire($number, $prefixSize);
	my $paxxer = basename $Paxxer;
	&printDoNotEditWarning($of);
	printf($of 'inputFilter="xxd -r $srcdir/tcases/%s";'."\n", $wire);
	print($of "outputFilter='cat';\n");
	printf($of 'expectedOutput="$srcdir/tcases/%s";'."\n", $human);
	print($of "testProgram='$paxxer --parse $prefixSize';\n");
	close($of);
}

# print test case-related file names to import into Makefile.am
sub makeMakefileRules {
	my $of = &create('generated.am');
	&printDoNotEditWarning($of);
	print($of "\n");
	&printMakefilelist($of, 'GENERATED_TCASES', sort keys %TCases);
	&printMakefilelist($of, 'GENERATED_TIMAGES', sort keys %Images);
	print($of 'TESTS += $(GENERATED_TCASES)' . "\n");
	print($of 'EXTRA_DIST += $(GENERATED_TCASES)' . "\n");
	print($of 'EXTRA_DIST += $(GENERATED_TIMAGES)' . "\n");
}

sub printMakefilelist {
	my ($file, $listName, @listItems) = @_;

	printf($file "%s =", $listName);
	map { print($file " \\\n\ttcases/$_"); } @listItems;
	print($file "\n\n");
}

sub printDoNotEditWarning {
	my $of = shift;
	printf($of "# Generated by %s. Modifications are futile.\n", basename $0)
		or die("cannot write: $!; stopped");
}

sub create {
	my ($fname, $scope) = @_;

	return undef if $scope && $scope->{$fname}++;

	local *OF;
	$fname = "$OutDir/$fname";
	open(OF, '>', $fname) or die("cannot open $fname: $!; stopped");
	return *OF;
}
